{
  "rule_configs": {
    "gdpr_003_per_nino": {
      "rule_id": "gdpr_003",
      "table_name": "per",
      "column_name": "nino",
      "description": "Check for Social Security Numbers",
      "python_code": "df[nino].str.match(r'\\b\\d{3}-\\d{2}-\\d{4}\\b')",
      "sql_code": "SELECT nino FROM per WHERE nino REGEXP '\\b\\d{3}-\\d{2}-\\d{4}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T23:34:30.917134",
      "is_active": true,
      "activated_at": "2024-12-20T23:34:30.917134"
    },
    "ppl_001_per_age": {
      "rule_id": "ppl_001",
      "table_name": "per",
      "column_name": "age",
      "description": "Validates that age is within reasonable range (18-100)",
      "python_code": "~df['age'].between(18, 100)",
      "sql_code": "SELECT * FROM people_table WHERE age NOT BETWEEN 18 AND 100",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T22:53:11.497099",
      "is_active": false,
      "activated_at": "2024-12-20T22:53:11.497099",
      "deactivated_at": "2024-12-20T23:33:31.638934"
    },
    "asg_001_per_age": {
      "rule_id": "asg_001",
      "table_name": "per",
      "column_name": "age",
      "description": "Validates assignment duration is within policy limits",
      "python_code": "(df['end_date'] - df['start_date']).dt.days > 90",
      "sql_code": "SELECT * FROM per WHERE DATEDIFF(end_date, start_date) > 90",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.508299",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.508299",
      "deactivated_at": "2024-12-20T21:49:18.848667"
    },
    "asg_002_per_project_code": {
      "rule_id": "asg_002",
      "table_name": "per",
      "column_name": "project_code",
      "description": "Validates project code format (P-####-YY)",
      "python_code": "~df['project_code'].str.match('^P-\\d{4}-\\d{2}$')",
      "sql_code": "SELECT * FROM per WHERE project_code NOT REGEXP '^P-\\d{4}-\\d{2}$'",
      "severity": "Medium",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.510300",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.510300",
      "deactivated_at": "2024-12-20T22:26:46.738407"
    },
    "asg_003_per_employee_id": {
      "rule_id": "asg_003",
      "table_name": "per",
      "column_name": "employee_id",
      "description": "Checks for overlapping assignments for same person",
      "python_code": "df.groupby('employee_id').apply(lambda x: (x['start_date'].shift() < x['end_date']).any())",
      "sql_code": "SELECT * FROM per WHERE employee_id IN (SELECT a1.employee_id FROM per a1 JOIN per a2 ON a1.employee_id = a2.employee_id WHERE a1.id != a2.id AND a1.start_date < a2.end_date AND a2.start_date < a1.end_date)",
      "severity": "Critical",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.511302",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.511302",
      "deactivated_at": "2024-12-20T22:26:52.502301"
    },
    "addr_001_per_postal_code": {
      "rule_id": "addr_001",
      "table_name": "per",
      "column_name": "postal_code",
      "description": "Validates postal code format by country",
      "python_code": "df['postal_code'].str.match(r'^\\d{5}(-\\d{4})?$')",
      "sql_code": "SELECT * FROM per WHERE postal_code NOT REGEXP '^\\d{5}(-\\d{4})?$'",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.512302",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.512302",
      "deactivated_at": "2024-12-20T22:26:51.851008"
    },
    "addr_002_per_country": {
      "rule_id": "addr_002",
      "table_name": "per",
      "column_name": "country",
      "description": "Validates country codes against ISO 3166",
      "python_code": "df['country'].str.match(r'^[A-Z]{2}$')",
      "sql_code": "SELECT * FROM per WHERE country NOT REGEXP '^[A-Z]{2}$'",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.513303",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.513303",
      "deactivated_at": "2024-12-20T22:26:53.556188"
    },
    "emp_001_per_salary": {
      "rule_id": "emp_001",
      "table_name": "per",
      "column_name": "salary",
      "description": "Validates salary is within acceptable range",
      "python_code": "df['salary'].between(30000, 200000)",
      "sql_code": "SELECT * FROM per WHERE salary NOT BETWEEN 30000 AND 200000",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.515305",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.515305",
      "deactivated_at": "2024-12-20T22:26:54.582366"
    },
    "emp_002_per_department_id": {
      "rule_id": "emp_002",
      "table_name": "per",
      "column_name": "department_id",
      "description": "Validates employee department assignment",
      "python_code": "df['department_id'].notna()",
      "sql_code": "SELECT * FROM per WHERE department_id IS NULL",
      "severity": "High",
      "category": "table_specific_rules",
      "last_updated": "2024-12-20T21:21:00.515305",
      "is_active": false,
      "activated_at": "2024-12-20T21:21:00.515305",
      "deactivated_at": "2024-12-20T22:26:55.715361"
    },
    "gdpr_002_per_name": {
      "rule_id": "gdpr_002",
      "table_name": "per",
      "column_name": "name",
      "description": "Identify columns containing phone numbers",
      "python_code": "df['name'].str.match(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b')",
      "sql_code": "SELECT * FROM per WHERE name REGEXP '\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'",
      "severity": "High",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T21:55:43.553330",
      "is_active": false,
      "activated_at": "2024-12-20T21:55:43.553330",
      "deactivated_at": "2024-12-20T22:26:57.178493"
    },
    "gdpr_004_per_name": {
      "rule_id": "gdpr_004",
      "table_name": "per",
      "column_name": "name",
      "description": "Checks for potential credit card numbers",
      "python_code": "df['name'].str.match(r'\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b')",
      "sql_code": "SELECT * FROM per WHERE name REGEXP '\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T21:55:43.555332",
      "is_active": false,
      "activated_at": "2024-12-20T21:55:43.555332",
      "deactivated_at": "2024-12-20T22:26:57.798556"
    },
    "gdpr_003_per_name": {
      "rule_id": "gdpr_003",
      "table_name": "per",
      "column_name": "name",
      "description": "Check for Social Security Numbers",
      "python_code": "df['name'].str.match(r'\\b\\d{3}-\\d{2}-\\d{4}\\b')",
      "sql_code": "SELECT * FROM per WHERE name REGEXP '\\b\\d{3}-\\d{2}-\\d{4}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T21:55:43.557334",
      "is_active": false,
      "activated_at": "2024-12-20T21:55:43.557334",
      "deactivated_at": "2024-12-20T22:26:58.594219"
    },
    "gdpr_006_per_name": {
      "rule_id": "gdpr_006",
      "table_name": "per",
      "column_name": "name",
      "description": "Validates email format in specified columns",
      "python_code": "df['name'].str.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$')",
      "sql_code": "SELECT * FROM per WHERE name REGEXP '^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'",
      "severity": "High",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T21:55:43.559336",
      "is_active": false,
      "activated_at": "2024-12-20T21:55:43.559336",
      "deactivated_at": "2024-12-20T22:26:59.936326"
    },
    "gdpr_008_per_name": {
      "rule_id": "gdpr_008",
      "table_name": "per",
      "column_name": "name",
      "description": "Validates phone number format",
      "python_code": "df['name'].str.match(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b')",
      "sql_code": "SELECT * FROM per WHERE name REGEXP '\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'",
      "severity": "Medium",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T21:55:43.560336",
      "is_active": false,
      "activated_at": "2024-12-20T21:55:43.560336",
      "deactivated_at": "2024-12-20T22:27:01.558626"
    },
    "gdpr_001_per_name": {
      "rule_id": "gdpr_001",
      "table_name": "per",
      "column_name": "name",
      "description": "Detect personally identifiable information in columns",
      "python_code": "df[name].str.match(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')",
      "sql_code": "SELECT name FROM per WHERE name REGEXP '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T23:38:47.582571",
      "is_active": true,
      "activated_at": "2024-12-20T23:38:47.582571"
    },
    "gdpr_001_per_age": {
      "rule_id": "gdpr_001",
      "table_name": "per",
      "column_name": "age",
      "description": "Detect personally identifiable information in columns",
      "python_code": "df['''age'''].str.match(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')",
      "sql_code": "SELECT age FROM per WHERE age REGEXP '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T22:29:14.107333",
      "is_active": false,
      "activated_at": "2024-12-20T22:29:14.107333",
      "deactivated_at": "2024-12-20T22:52:08.931586"
    },
    "dq1_per_age": {
      "rule_id": "dq1",
      "table_name": "per",
      "column_name": "age",
      "description": "Check for missing values in required fields",
      "python_code": "df[age].isnull().sum() == 0",
      "sql_code": "SELECT COUNT(*) FROM per WHERE age IS NULL",
      "severity": "High",
      "category": "data_quality_rules",
      "last_updated": "2024-12-20T23:35:19.439624",
      "is_active": true,
      "activated_at": "2024-12-20T23:35:19.439624"
    },
    "dq2_per_date_of_birth": {
      "rule_id": "dq2",
      "table_name": "per",
      "column_name": "date_of_birth",
      "description": "Ensure dates are in the correct format (YYYY-MM-DD)",
      "python_code": "pd.to_datetime(df[date_of_birth], format='%Y-%m-%d', errors='coerce').notna()",
      "sql_code": "SELECT date_of_birth FROM per WHERE STR_TO_DATE(date_of_birth, '%Y-%m-%d') IS NULL",
      "severity": "High",
      "category": "data_quality_rules",
      "last_updated": "2024-12-20T23:35:37.405158",
      "is_active": true,
      "activated_at": "2024-12-20T23:35:37.405158"
    },
    "gdpr_007_per_date_of_birth": {
      "rule_id": "gdpr_007",
      "table_name": "per",
      "column_name": "date_of_birth",
      "description": "Validates date format (YYYY-MM-DD)",
      "python_code": "pd.to_datetime(df[date_of_birth], errors='coerce')",
      "sql_code": "SELECT date_of_birth FROM per WHERE date_of_birth NOT REGEXP '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' OR STR_TO_DATE(date_of_birth, '%Y-%m-%d') IS NULL",
      "severity": "Medium",
      "category": "gdpr_rules",
      "last_updated": "2024-12-20T23:39:04.382718",
      "is_active": true,
      "activated_at": "2024-12-20T23:39:04.382718"
    },
    "gdpr_001_assignments_name": {
      "rule_id": "gdpr_001",
      "table_name": "assignments",
      "column_name": "name",
      "description": "Detect personally identifiable information in columns",
      "python_code": "df[name].str.match(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')",
      "sql_code": "SELECT name FROM assignments WHERE name REGEXP '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-21T00:03:59.585258",
      "is_active": true,
      "activated_at": "2024-12-21T00:03:59.585258"
    },
    "gdpr_003_assignments_nino": {
      "rule_id": "gdpr_003",
      "table_name": "assignments",
      "column_name": "nino",
      "description": "Check for Social Security Numbers",
      "python_code": "df[nino].str.match(r'\\b\\d{3}-\\d{2}-\\d{4}\\b')",
      "sql_code": "SELECT nino FROM assignments WHERE nino REGEXP '\\b\\d{3}-\\d{2}-\\d{4}\\b'",
      "severity": "Critical",
      "category": "gdpr_rules",
      "last_updated": "2024-12-21T00:04:18.347232",
      "is_active": true,
      "activated_at": "2024-12-21T00:04:18.347232"
    }
  }
}