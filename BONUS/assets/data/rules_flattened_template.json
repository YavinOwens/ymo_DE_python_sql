[
    {
        "id": "gdpr_001",
        "name": "PII Data Detection",
        "description": "Detect personally identifiable information in columns",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'",
        "message": "Column may contain email addresses (PII data)",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            },
            {
                "activated_date": "2024-12-19T15:43:48.180458",
                "deactivated_date": "2024-12-19T15:43:48.180458"
            }
        ]
    },
    {
        "id": "gdpr_002",
        "name": "Phone Number Detection",
        "description": "Identify columns containing phone numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'",
        "message": "Column may contain phone numbers (PII data)",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_003",
        "name": "SSN Detection",
        "description": "Check for Social Security Numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b\\d{3}-\\d{2}-\\d{4}\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '\\b\\d{3}-\\d{2}-\\d{4}\\b'",
        "message": "Column may contain SSNs (PII data)",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "gdpr_004",
        "name": "Credit Card Pattern",
        "description": "Checks for potential credit card numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b'",
        "message": "Column may contain credit card numbers (PII data)",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "gdpr_005",
        "name": "Password Pattern",
        "description": "Checks for exposed passwords",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'password|pwd|pass')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP 'password|pwd|pass'",
        "message": "Column may contain passwords (PII data)",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "gdpr_006",
        "name": "Email Format Check",
        "description": "Validates email format in specified columns",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'",
        "message": "Column may contain invalid email formats",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "gdpr_007",
        "name": "Date Format Check",
        "description": "Validates date format (YYYY-MM-DD)",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "pd.to_datetime(df[column_name], errors='coerce')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' OR STR_TO_DATE(column_name, '%Y-%m-%d') IS NULL",
        "message": "Column may contain invalid date formats",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_008",
        "name": "Phone Number Format",
        "description": "Validates phone number format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'",
        "message": "Column may contain invalid phone number formats",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_009",
        "name": "URL Format Check",
        "description": "Validates URL format in specified columns",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+[^\\s]*')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP 'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+[^\\s]*'",
        "message": "Column may contain invalid URL formats",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_010",
        "name": "ZIP Code Format",
        "description": "Validates US ZIP code format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'\\b\\d{5}(?:-\\d{4})?\\b')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '\\b\\d{5}(?:-\\d{4})?\\b'",
        "message": "Column may contain invalid ZIP code formats",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_011",
        "name": "HTML Tag Check",
        "description": "Detects HTML tags in text fields",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'<[^>]+>')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '<[^>]+>'",
        "message": "Column may contain HTML tags",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_012",
        "name": "SQL Injection Pattern",
        "description": "Detects potential SQL injection patterns",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION)\\b', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LOWER(column_name) REGEXP '\\b(select|insert|update|delete|drop|union)\\b'",
        "message": "Column may contain SQL injection patterns",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_013",
        "name": "Base64 Pattern",
        "description": "Identifies potential Base64 encoded strings",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^[A-Za-z0-9+/]{4}*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[A-Za-z0-9+/]{4}*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'",
        "message": "Column may contain Base64 encoded strings",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_014",
        "name": "Unicode Control Chars",
        "description": "Detects Unicode control characters",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.contains(r'[\\x00-\\x1F\\x7F]')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '[\\x00-\\x1F\\x7F]'",
        "message": "Column may contain Unicode control characters",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_015",
        "name": "File Path Pattern",
        "description": "Identifies potential file paths",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'[A-Za-z]:\\\\|/etc/|/var/|/tmp/')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '[A-Za-z]:\\\\|/etc/|/var/|/tmp/'",
        "message": "Column may contain file paths",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_016",
        "name": "JWT Token Pattern",
        "description": "Detects JWT tokens in text",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'eyJ[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP 'eyJ[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*'",
        "message": "Column may contain JWT tokens",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_017",
        "name": "API Key Pattern",
        "description": "Identifies potential API keys",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'[a-zA-Z0-9]{32,}')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '[a-zA-Z0-9]{32,}'",
        "message": "Column may contain API keys",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_018",
        "name": "MAC Address Format",
        "description": "Validates MAC address format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'",
        "message": "Column may contain invalid MAC addresses",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_019",
        "name": "GUID Format",
        "description": "Validates GUID/UUID format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'",
        "message": "Column may contain invalid GUIDs",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_020",
        "name": "Hash Pattern",
        "description": "Identifies potential hash values (MD5, SHA)",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$'",
        "message": "Column may contain hash values",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_021",
        "name": "XML Pattern",
        "description": "Detects XML content in fields",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.contains(r'<\\?xml.*\\?>')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '<\\?xml.*\\?>'",
        "message": "Column may contain XML content",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_022",
        "name": "Binary Data Pattern",
        "description": "Detects binary data in text fields",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]'",
        "message": "Column may contain binary data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_023",
        "name": "Script Tag Pattern",
        "description": "Detects script tags in content",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'<script.*?>.*?</script>', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '(?i)<script.*?>.*?</script>'",
        "message": "Column may contain script tags",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_024",
        "name": "IBAN Format",
        "description": "Validates International Bank Account Numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'^[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}$'",
        "message": "Column may contain invalid IBANs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_025",
        "name": "Vehicle VIN Format",
        "description": "Validates Vehicle Identification Numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^[A-HJ-NPR-Z0-9]{17}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^[A-HJ-NPR-Z0-9]{17}$'",
        "message": "Column may contain invalid VINs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_026",
        "name": "OAuth Token Pattern",
        "description": "Detects OAuth tokens in text",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'(Bearer|OAuth) [A-Za-z0-9\\-._~+/]+')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '(Bearer|OAuth) [A-Za-z0-9\\-._~+/]+'",
        "message": "Column may contain OAuth tokens",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_027",
        "name": "Geographic Coordinates",
        "description": "Validates latitude/longitude format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^-?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*-?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^-?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*-?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$'",
        "message": "Column may contain invalid coordinates",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_028",
        "name": "Color Code Format",
        "description": "Validates hex color codes",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'",
        "message": "Column may contain invalid color codes",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_029",
        "name": "ISBN Format",
        "description": "Validates ISBN-10 and ISBN-13 formats",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'",
        "message": "Column may contain invalid ISBNs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_030",
        "name": "Domain Name Format",
        "description": "Validates domain name format",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name REGEXP '^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'",
        "message": "Column may contain invalid domain names",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_015_a",
        "name": "Credit Card Detection",
        "description": "Identifies potential credit card numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain credit card numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_016_a",
        "name": "Passport Number Detection",
        "description": "Identifies potential passport numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[A-Z]\\d{7}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain passport numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_017_a",
        "name": "Date of Birth Detection",
        "description": "Identifies potential dates of birth",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b\\d{2}/\\d{2}/\\d{4}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain dates of birth",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_018_a",
        "name": "National ID Detection",
        "description": "Identifies potential national ID numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[A-Z]{2}\\d{6}[A-Z]\\b')",
        "validation_code_sql": "",
        "message": "Column may contain national ID numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_019_a",
        "name": "Bank Account Detection",
        "description": "Identifies potential bank account numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b\\d{8,12}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain bank account numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_020_a",
        "name": "Healthcare ID Detection",
        "description": "Identifies potential healthcare ID numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[H]\\d{9}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain healthcare IDs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_021_a",
        "name": "Driver License Detection",
        "description": "Identifies potential driver license numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b[A-Z]\\d{7}[A-Z]\\b')",
        "validation_code_sql": "",
        "message": "Column may contain driver license numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_022_a",
        "name": "IP Address Detection",
        "description": "Identifies IP addresses",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain IP addresses",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_023_a",
        "name": "GPS Coordinate Detection",
        "description": "Identifies GPS coordinates",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)\\b')",
        "validation_code_sql": "",
        "message": "Column may contain GPS coordinates",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_024_a",
        "name": "Password Hash Detection",
        "description": "Identifies potential password hashes",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[a-f0-9]{32}\\b|\\b[a-f0-9]{40}\\b|\\b[a-f0-9]{64}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain password hashes",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_025_a",
        "name": "JWT Token Detection",
        "description": "Identifies JWT tokens",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\bey[A-Za-z0-9-_]+\\.ey[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\b')",
        "validation_code_sql": "",
        "message": "Column may contain JWT tokens",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_026_a",
        "name": "MAC Address Detection",
        "description": "Identifies MAC addresses",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'\\b([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})\\b')",
        "validation_code_sql": "",
        "message": "Column may contain MAC addresses",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_027_a",
        "name": "URL with Auth Detection",
        "description": "Identifies URLs containing authentication information",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b[a-zA-Z]+://[^/\\s:@]*:[^/\\s:@]*@[^/\\s]+\\b')",
        "validation_code_sql": "",
        "message": "Column may contain URLs with authentication credentials",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_028_a",
        "name": "OAuth Token Detection",
        "description": "Identifies OAuth tokens",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\bya29\\.[0-9A-Za-z\\-_]+\\b')",
        "validation_code_sql": "",
        "message": "Column may contain OAuth tokens",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_029_a",
        "name": "API Key Detection",
        "description": "Identifies potential API keys",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b[a-zA-Z0-9]{32,45}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain API keys",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_031",
        "name": "Medical Record Number Detection",
        "description": "Identifies potential medical record numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\bMRN\\d{8}\\b|\\b\\d{8}MRN\\b')",
        "validation_code_sql": "",
        "message": "Column may contain medical record numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_032",
        "name": "Insurance Policy Number Detection",
        "description": "Identifies insurance policy numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\b[A-Z]{2}\\d{6}-[A-Z]\\d{2}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain insurance policy numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_033",
        "name": "Biometric Data Pattern",
        "description": "Identifies potential biometric data patterns",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'biometric|fingerprint|retina|dna|facial|voice', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain biometric data references",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_034",
        "name": "Genetic Data Pattern",
        "description": "Identifies potential genetic data references",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'genetic|genome|dna sequence|chromosom|allele', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain genetic data references",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_035",
        "name": "Student ID Detection",
        "description": "Identifies potential student identification numbers",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'\\bSTU\\d{8}\\b|\\b[A-Z]\\d{8}STU\\b')",
        "validation_code_sql": "",
        "message": "Column may contain student IDs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_036",
        "name": "Religious Affiliation Detection",
        "description": "Identifies potential religious affiliation data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'religion|faith|church|mosque|temple|synagogue|belief', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain religious affiliation data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_037",
        "name": "Political Opinion Detection",
        "description": "Identifies potential political opinion data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'political|party|vote|election|campaign|democrat|republican|liberal|conservative', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain political opinion data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_038",
        "name": "Trade Union Membership",
        "description": "Identifies potential trade union membership data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'union|trade union|labor union|membership|dues', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain trade union membership data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_039",
        "name": "Sexual Orientation Detection",
        "description": "Identifies potential sexual orientation data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'orientation|sexuality|gender identity|lgbtq', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain sexual orientation data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_040",
        "name": "Criminal Record Detection",
        "description": "Identifies potential criminal record data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'criminal|offense|conviction|arrest|felony|misdemeanor', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain criminal record data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_041",
        "name": "Mental Health Data Detection",
        "description": "Identifies potential mental health data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'mental health|psychiatric|therapy|counseling|diagnosis|treatment', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain mental health data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_042",
        "name": "Financial Account Pattern",
        "description": "Identifies potential financial account data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.match(r'\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b|\\b[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}\\b')",
        "validation_code_sql": "",
        "message": "Column may contain financial account numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_043",
        "name": "Ethnic Origin Detection",
        "description": "Identifies potential ethnic origin data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'ethnicity|race|origin|nationality|ethnic background', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain ethnic origin data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_044",
        "name": "Child Data Detection",
        "description": "Identifies potential data related to children",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'minor|child|juvenile|under 18|parent consent', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain data related to children",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_045",
        "name": "Disability Status Detection",
        "description": "Identifies potential disability status data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'disability|disabled|impairment|special needs|accommodation', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain disability status data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_046",
        "name": "Marital Status Detection",
        "description": "Identifies potential marital status data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'marital status|married|single|divorced|widowed|civil partnership', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain marital status data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_047",
        "name": "Family Composition Detection",
        "description": "Identifies potential family composition data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'dependents|children|family size|household|next of kin', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain family composition data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_048",
        "name": "Income Level Detection",
        "description": "Identifies potential income level data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'income|salary|earnings|wages|compensation|net worth', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain income level data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_049",
        "name": "Education History Detection",
        "description": "Identifies potential education history data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'education|school|university|degree|diploma|qualification|gpa', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain education history data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_050",
        "name": "Employment History Detection",
        "description": "Identifies potential employment history data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'employment|job history|previous employer|work experience|position held', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain employment history data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_051",
        "name": "Medical History Detection",
        "description": "Identifies potential medical history data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'medical history|health record|patient history|diagnosis history|treatment history', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain medical history data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_052",
        "name": "Travel History Detection",
        "description": "Identifies potential travel history data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'travel history|passport stamps|visited countries|travel dates|itinerary', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain travel history data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_053",
        "name": "Immigration Status Detection",
        "description": "Identifies potential immigration status data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'immigration|visa|residency|citizenship|naturalization|asylum', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain immigration status data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_054",
        "name": "Social Media Profile Detection",
        "description": "Identifies potential social media profile data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'social media|facebook|twitter|instagram|linkedin|profile url', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain social media profile data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_055",
        "name": "Location Tracking Detection",
        "description": "Identifies potential location tracking data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'gps|location|coordinates|latitude|longitude|geolocation', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain location tracking data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_056",
        "name": "Behavioral Data Detection",
        "description": "Identifies potential behavioral tracking data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'behavior|browsing history|search history|user activity|tracking|preferences', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain behavioral tracking data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_057",
        "name": "Device Identifier Detection",
        "description": "Identifies potential device identifier data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'device id|mac address|imei|uuid|device fingerprint', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain device identifier data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_058",
        "name": "Authentication Data Detection",
        "description": "Identifies potential authentication data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'password|secret|token|auth|credentials|2fa', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain authentication data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_059",
        "name": "Professional Certification Detection",
        "description": "Identifies potential professional certification data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'certification|license number|professional qualification|accreditation|certificate id', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain professional certification data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_060",
        "name": "Genetic Marker Detection",
        "description": "Identifies potential genetic marker data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'genetic marker|dna profile|genome sequence|genetic test|genetic variant', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain genetic marker data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_061",
        "name": "Biometric Template Detection",
        "description": "Identifies potential biometric template data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'biometric template|fingerprint template|iris scan|facial recognition data', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LOWER(column_name) REGEXP 'biometric template|fingerprint template|iris scan|facial recognition data'",
        "message": "Column may contain biometric template data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_062",
        "name": "Health Insurance Detection",
        "description": "Identifies potential health insurance data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'health insurance|medical coverage|insurance policy|healthcare provider|insurance id', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LOWER(column_name) REGEXP 'health insurance|medical coverage|insurance policy|healthcare provider|insurance id'",
        "message": "Column may contain health insurance data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_063",
        "name": "Bank Account Detection",
        "description": "Identifies potential bank account data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'bank account|iban|swift code|routing number|account number', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LOWER(column_name) REGEXP 'bank account|iban|swift code|routing number|account number'",
        "message": "Column may contain bank account data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_064",
        "name": "Vehicle Identifier Detection",
        "description": "Identifies potential vehicle identifier data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'vehicle id|vin number|license plate|registration number|chassis number', case=False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LOWER(column_name) REGEXP 'vehicle id|vin number|license plate|registration number|chassis number'",
        "message": "Column may contain vehicle identifier data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_065",
        "name": "Property Ownership Detection",
        "description": "Identifies potential property ownership data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'property deed|land registry|ownership title|property id|real estate', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain property ownership data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_066",
        "name": "Investment Portfolio Detection",
        "description": "Identifies potential investment portfolio data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'investment portfolio|stock holdings|securities account|trading account|investment id', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain investment portfolio data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_067",
        "name": "Tax Information Detection",
        "description": "Identifies potential tax information data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'tax id|tax number|tax return|tax record|tax filing', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain tax information data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_068",
        "name": "Military Service Detection",
        "description": "Identifies potential military service data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'military service|service number|military id|veteran status|military rank', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain military service data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_069",
        "name": "Pension Information Detection",
        "description": "Identifies potential pension information data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'pension|retirement account|pension number|retirement fund|pension scheme', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain pension information data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_070",
        "name": "Welfare Benefits Detection",
        "description": "Identifies potential welfare benefits data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'welfare|benefits|social assistance|benefit claim|welfare payment', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain welfare benefits data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_071",
        "name": "Professional Membership Detection",
        "description": "Identifies potential professional membership data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "High",
        "validation_code": "df[column_name].str.contains(r'professional membership|association member|member id|professional body|membership number', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain professional membership data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "gdpr_072",
        "name": "Digital Identity Detection",
        "description": "Identifies potential digital identity data",
        "category": "gdpr_rules",
        "type": "pattern_match",
        "severity": "Critical",
        "validation_code": "df[column_name].str.contains(r'digital identity|digital certificate|digital signature|electronic id|digital passport', case=False)",
        "validation_code_sql": "",
        "message": "Column may contain digital identity data",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": "2024-12-19"
            }
        ]
    },
    {
        "id": "dq1",
        "name": "No Missing Values",
        "description": "Check for missing values in required fields",
        "category": "data_quality_rules",
        "type": "completeness",
        "severity": "High",
        "validation_code": "df[column_name].isnull().sum() == 0",
        "validation_code_sql": "SELECT COUNT(*) FROM table_name WHERE column_name IS NULL",
        "message": "Missing values found in required field",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq2",
        "name": "Date Format Check",
        "description": "Ensure dates are in the correct format (YYYY-MM-DD)",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "High",
        "validation_code": "pd.to_datetime(df[column_name], format='%Y-%m-%d', errors='coerce').notna()",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE STR_TO_DATE(column_name, '%Y-%m-%d') IS NULL",
        "message": "Invalid date format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq3",
        "name": "Email Format Check",
        "description": "Validate email addresses format",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "High",
        "validation_code": "df[column_name].str.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'",
        "message": "Invalid email format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_016",
        "name": "Decimal Precision Check",
        "description": "Validates decimal numbers have correct precision",
        "category": "data_quality_rules",
        "type": "value_check",
        "severity": "Medium",
        "validation_code": "df[column_name].astype(str).str.match(r'^-?\\d+\\.\\d{2}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^-?\\d+\\.\\d{2}$'",
        "message": "Values should have exactly 2 decimal places",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_017",
        "name": "Time Format Check",
        "description": "Validates time format (HH:MM:SS)",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$'",
        "message": "Time values should be in HH:MM:SS format",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_018",
        "name": "URL Format Check",
        "description": "Validates URL format",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^https?://(?:www\\.)?[\\w\\d\\-_]+\\.\\w{2,}(?:/[\\w\\d\\-._/?%=]*)?$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^https?://(?:www\\.)?[\\w\\d\\-_]+\\.\\w{2,}(?:/[\\w\\d\\-._/?%=]*)?$'",
        "message": "Values should be valid URLs",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_019",
        "name": "Currency Format Check",
        "description": "Validates currency format (e.g., $123.45)",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^\\$\\d+\\.\\d{2}$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^\\$\\d+\\.\\d{2}$'",
        "message": "Invalid currency format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_020",
        "name": "Percentage Range Check",
        "description": "Validates percentage values are between 0 and 100",
        "category": "data_quality_rules",
        "type": "range_check",
        "severity": "Medium",
        "validation_code": "df[column_name].between(0, 100)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT BETWEEN 0 AND 100",
        "message": "Percentage values should be between 0 and 100",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_021",
        "name": "String Length Check",
        "description": "Validates string length is within limits",
        "category": "data_quality_rules",
        "type": "length_check",
        "severity": "Low",
        "validation_code": "df[column_name].str.len().between(1, 255)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE LENGTH(column_name) NOT BETWEEN 1 AND 255",
        "message": "String length should be between 1 and 255 characters",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_022",
        "name": "Alphanumeric Check",
        "description": "Validates values are alphanumeric only",
        "category": "data_quality_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^[a-zA-Z0-9]+$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^[a-zA-Z0-9]+$'",
        "message": "Values should contain only letters and numbers",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_023",
        "name": "Date Range Check",
        "description": "Validates dates are within acceptable range",
        "category": "data_quality_rules",
        "type": "range_check",
        "severity": "Medium",
        "validation_code": "pd.to_datetime(df[column_name]).between('1900-01-01', '2100-12-31')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT BETWEEN '1900-01-01' AND '2100-12-31'",
        "message": "Dates should be between 1900 and 2100",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_024",
        "name": "Case Consistency Check",
        "description": "Validates text case consistency",
        "category": "data_quality_rules",
        "type": "consistency_check",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^[A-Z]+$|^[a-z]+$')",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE column_name NOT REGEXP '^[A-Z]+$' AND column_name NOT REGEXP '^[a-z]+$'",
        "message": "Text should be consistently upper or lower case",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "dq_025",
        "name": "Whitespace Check",
        "description": "Validates no leading/trailing whitespace",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Low",
        "validation_code": "df[column_name].str.match(r'^\\S.*\\S$|^\\S$')",
        "validation_code_sql": "",
        "message": "Values should not have leading or trailing whitespace",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "dq_026",
        "name": "Special Character Check",
        "description": "Validates absence of special characters",
        "category": "data_quality_rules",
        "type": "pattern_match",
        "severity": "Medium",
        "validation_code": "~df[column_name].str.match(r'[!@#$%^&*(),.?\":{}|<>]')",
        "validation_code_sql": "",
        "message": "Values should not contain special characters",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "dq_027",
        "name": "Word Count Check",
        "description": "Validates number of words in text",
        "category": "data_quality_rules",
        "type": "length_check",
        "severity": "Low",
        "validation_code": "df[column_name].str.split().str.len().between(1, 100)",
        "validation_code_sql": "",
        "message": "Text should contain between 1 and 100 words",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "dq_028",
        "name": "Duplicate Words Check",
        "description": "Validates no consecutive duplicate words",
        "category": "data_quality_rules",
        "type": "pattern_match",
        "severity": "Low",
        "validation_code": "~df[column_name].str.match(r'\\b(\\w+)\\s+\\1\\b')",
        "validation_code_sql": "",
        "message": "Text should not contain consecutive duplicate words",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "dq_029",
        "name": "Number Format Check",
        "description": "Validates number formatting",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^-?\\d{1,3}(,\\d{3})*(\\.\\d+)?$')",
        "validation_code_sql": "",
        "message": "Numbers should be properly formatted with commas and decimals",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "dq_030",
        "name": "JSON Format Check",
        "description": "Validates JSON string format",
        "category": "data_quality_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].apply(lambda x: bool(json.loads(x)) if isinstance(x, str) else False)",
        "validation_code_sql": "",
        "message": "Values should be valid JSON strings",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v1",
        "name": "Salary Range Check",
        "description": "Ensure salaries are within valid range",
        "category": "validation_rules",
        "type": "range_check",
        "severity": "High",
        "validation_code": "df['salary'].between(min_salary, max_salary)",
        "validation_code_sql": "",
        "message": "Salary values outside valid range",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v2",
        "name": "Department ID Check",
        "description": "Verify department IDs exist in departments table",
        "category": "validation_rules",
        "type": "reference_check",
        "severity": "Critical",
        "validation_code": "df['department_id'].isin(departments['department_id'])",
        "validation_code_sql": "",
        "message": "Invalid department IDs found",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v3",
        "name": "Employee Age Check",
        "description": "Validate employee age is between 18 and 65",
        "category": "validation_rules",
        "type": "range_check",
        "severity": "High",
        "validation_code": "df['age'].between(18, 65)",
        "validation_code_sql": "",
        "message": "Employee age outside valid range",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v4",
        "name": "Email Format Validation",
        "description": "Validate email addresses follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['email'].str.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$')",
        "validation_code_sql": "",
        "message": "Invalid email format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v5",
        "name": "Phone Number Format",
        "description": "Validate phone numbers follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['phone'].str.match(r'^\\+?1?\\d{9,15}$')",
        "validation_code_sql": "",
        "message": "Invalid phone number format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v6",
        "name": "Date Format Check",
        "description": "Validate dates follow YYYY-MM-DD format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "pd.to_datetime(df[column_name], format='%Y-%m-%d', errors='coerce').notna()",
        "validation_code_sql": "",
        "message": "Invalid date format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v7",
        "name": "Numeric Range Check",
        "description": "Validate numeric values fall within specified range",
        "category": "validation_rules",
        "type": "range_check",
        "severity": "Medium",
        "validation_code": "df[column_name].between(min_value, max_value)",
        "validation_code_sql": "",
        "message": "Numeric values outside valid range",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v8",
        "name": "String Length Check",
        "description": "Validate string length meets requirements",
        "category": "validation_rules",
        "type": "length_check",
        "severity": "Low",
        "validation_code": "df[column_name].str.len().between(min_length, max_length)",
        "validation_code_sql": "",
        "message": "String length outside valid range",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v9",
        "name": "Boolean Value Check",
        "description": "Validate boolean fields contain valid values",
        "category": "validation_rules",
        "type": "value_check",
        "severity": "Low",
        "validation_code": "df[column_name].isin([True, False, 0, 1])",
        "validation_code_sql": "",
        "message": "Invalid boolean values detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v10",
        "name": "Currency Format Check",
        "description": "Validate currency values follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^\\$\\d+\\.\\d{2}$')",
        "validation_code_sql": "",
        "message": "Invalid currency format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v11",
        "name": "ZIP Code Format",
        "description": "Validate ZIP codes follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^\\d{5}(?:-\\d{4})?$')",
        "validation_code_sql": "",
        "message": "Invalid ZIP code format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v12",
        "name": "URL Format Check",
        "description": "Validate URLs follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^https?://(?:www\\.)?[\\w\\d\\-_]+\\.\\w{2,}(?:/[\\w\\d\\-._/?%=]*)?$')",
        "validation_code_sql": "",
        "message": "Invalid URL format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v13",
        "name": "IP Address Format",
        "description": "Validate IP addresses follow correct format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].str.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')",
        "validation_code_sql": "",
        "message": "Invalid IP address format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v14",
        "name": "Password Strength Check",
        "description": "Validate password meets strength requirements",
        "category": "validation_rules",
        "type": "security_check",
        "severity": "Critical",
        "validation_code": "df['password'].str.match(r'^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$')",
        "validation_code_sql": "",
        "message": "Password does not meet strength requirements",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v15",
        "name": "Credit Card Format",
        "description": "Validate credit card number format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Critical",
        "validation_code": "df['credit_card'].str.match(r'^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9][0-9])[0-9]{12})$')",
        "validation_code_sql": "",
        "message": "Invalid credit card format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v16",
        "name": "SSN Format",
        "description": "Validate Social Security Number format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Critical",
        "validation_code": "df['ssn'].str.match(r'^\\d{3}-\\d{2}-\\d{4}$')",
        "validation_code_sql": "",
        "message": "Invalid SSN format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v17",
        "name": "Time Format",
        "description": "Validate time format (HH:MM:SS)",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['time'].str.match(r'^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$')",
        "validation_code_sql": "",
        "message": "Invalid time format detected",
        "active": true,
        "created_date": "2024-12-19T16:41:41.009883",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": []
    },
    {
        "id": "v18",
        "name": "Percentage Format",
        "description": "Validate percentage values",
        "category": "validation_rules",
        "type": "range_check",
        "severity": "Medium",
        "validation_code": "df['percentage'].between(0, 100)",
        "validation_code_sql": "SELECT percentage FROM table_name WHERE percentage NOT BETWEEN 0 AND 100",
        "message": "Invalid percentage value detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "v19",
        "name": "ISBN Format",
        "description": "Validate ISBN format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['isbn'].str.match(r'^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$')",
        "validation_code_sql": "SELECT isbn FROM table_name WHERE isbn NOT REGEXP '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'",
        "message": "Invalid ISBN format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "v20",
        "name": "GUID Format",
        "description": "Validate GUID format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['guid'].str.match(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')",
        "validation_code_sql": "SELECT guid FROM table_name WHERE guid NOT REGEXP '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'",
        "message": "Invalid GUID format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "v21",
        "name": "MAC Address Format",
        "description": "Validate MAC address format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['mac_address'].str.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')",
        "validation_code_sql": "SELECT mac_address FROM table_name WHERE mac_address NOT REGEXP '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'",
        "message": "Invalid MAC address format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "v22",
        "name": "Hexadecimal Format",
        "description": "Validate hexadecimal format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['hex_value'].str.match(r'^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$')",
        "validation_code_sql": "SELECT hex_value FROM table_name WHERE hex_value NOT REGEXP '^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$'",
        "message": "Invalid hexadecimal format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "v23",
        "name": "JSON Format",
        "description": "Validate JSON string format",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df['json_data'].apply(lambda x: bool(json.loads(x)) if isinstance(x, str) else False)",
        "validation_code_sql": "SELECT json_data FROM table_name WHERE JSON_VALID(json_data) = 0",
        "message": "Invalid JSON format detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "val_001",
        "name": "Email Domain Check",
        "description": "Validates that email domains are from allowed list",
        "category": "validation_rules",
        "type": "Security",
        "severity": "High",
        "validation_code": "~df['email'].str.extract('@(.+)$')[0].isin(allowed_domains))",
        "validation_code_sql": "SELECT email FROM table_name WHERE SUBSTRING_INDEX(email, '@', -1) NOT IN (SELECT domain FROM allowed_domains)",
        "message": "Unauthorized email domain detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "val_002",
        "name": "Country Code Check",
        "description": "Validates that country codes are valid ISO codes",
        "category": "validation_rules",
        "type": "Reference",
        "severity": "High",
        "validation_code": "~df['country'].isin(iso_country_codes))",
        "validation_code_sql": "SELECT country FROM table_name WHERE country NOT IN (SELECT code FROM iso_country_codes)",
        "message": "Invalid country code detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "val_003",
        "name": "JSON Format Check",
        "description": "Validates that string values are valid JSON",
        "category": "validation_rules",
        "type": "format_check",
        "severity": "Medium",
        "validation_code": "df[column_name].apply(lambda x: bool(json.loads(x)) if isinstance(x, str) else False)",
        "validation_code_sql": "SELECT column_name FROM table_name WHERE JSON_VALID(column_name) = 0",
        "message": "Values should be valid JSON strings",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "b1",
        "name": "Manager Assignment",
        "description": "Validates manager assignments",
        "category": "business_rules",
        "type": "reference",
        "severity": "High",
        "validation_code": "df['manager_id'].isin(df['employee_id'])",
        "validation_code_sql": "SELECT m.manager_id FROM table_name m LEFT JOIN table_name e ON m.manager_id = e.employee_id WHERE e.employee_id IS NULL",
        "message": "Invalid manager assignment detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "cross_001",
        "name": "Manager Hierarchy Check",
        "description": "Validates manager hierarchy is consistent across departments",
        "category": "cross_table_rules",
        "type": "Cross Reference",
        "severity": "Critical",
        "validation_code": "df_emp.merge(df_dept, left_on='manager_id', right_on='department_head_id')['department_id_x'] == df_emp['department_id']",
        "validation_code_sql": "SELECT e.* FROM employee_table e JOIN department_table d ON e.manager_id = d.department_head_id WHERE e.department_id != d.department_id",
        "message": "Manager hierarchy inconsistency detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "cbr_001",
        "name": "Overtime Eligibility",
        "description": "Validates overtime assignments based on employment type and regulations",
        "category": "complex_business_rules",
        "type": "Complex Logic",
        "severity": "High",
        "validation_code": "def check_overtime_eligibility(row):\n    if row['employment_type'] == 'contractor':\n        return row['overtime_hours'] == 0\n    elif row['employment_type'] == 'part_time':\n        return row['overtime_hours'] <= 20\n    else:\n        return row['overtime_hours'] <= 40\n\ndf.apply(check_overtime_eligibility, axis=1)",
        "validation_code_sql": "SELECT * FROM employee_assignments \nWHERE (employment_type = 'contractor' AND overtime_hours > 0)\n   OR (employment_type = 'part_time' AND overtime_hours > 20)\n   OR (employment_type = 'full_time' AND overtime_hours > 40)",
        "message": "Invalid overtime assignment detected",
        "active": true,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            }
        ]
    },
    {
        "id": "cbr_002",
        "name": "Resource Allocation Check",
        "description": "Validates resource allocation across projects considering skills and availability",
        "category": "complex_business_rules",
        "type": "Complex Logic",
        "severity": "Critical",
        "validation_code": "def validate_resource_allocation(df_assignments, df_skills, df_projects):\n    # Check skill requirements\n    skill_match = df_assignments.merge(df_skills, on='employee_id').merge(\n        df_projects[['project_id', 'required_skills']], on='project_id'\n    ).apply(lambda x: set(x['skills']).intersection(x['required_skills']), axis=1)\n    \n    # Check availability\n    availability = df_assignments.groupby('employee_id')['allocation_percentage'].sum() <= 100\n    \n    return skill_match.map(len) > 0 & availability",
        "validation_code_sql": "WITH resource_allocation AS (\n    SELECT \n        employee_id,\n        SUM(allocation_percentage) as total_allocation\n    FROM project_assignments\n    GROUP BY employee_id\n),\nskill_requirements AS (\n    SELECT \n        pa.employee_id,\n        COUNT(DISTINCT ps.skill_id) as matching_skills\n    FROM project_assignments pa\n    JOIN project_skills ps ON pa.project_id = ps.project_id\n    JOIN employee_skills es ON pa.employee_id = es.employee_id \n        AND ps.skill_id = es.skill_id\n    GROUP BY pa.employee_id\n)\nSELECT \n    ra.employee_id\nFROM resource_allocation ra\nLEFT JOIN skill_requirements sr ON ra.employee_id = sr.employee_id\nWHERE ra.total_allocation > 100 \n   OR sr.matching_skills = 0",
        "message": "Invalid resource allocation detected",
        "active": false,
        "created_date": "2024-12-19",
        "last_modified": "2024-12-19T16:41:41.009883",
        "activation_history": [
            {
                "activated_date": "2024-12-19",
                "deactivated_date": null
            },
            {
                "activated_date": "2024-12-19T15:43:28.365926",
                "deactivated_date": "2024-12-19T15:43:28.365926"
            }
        ]
    }
]