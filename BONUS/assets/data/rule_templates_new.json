{
    "gdpr_rules": [
        {
            "id": "gdpr_001",
            "name": "PII Data Detection",
            "description": "Detect personally identifiable information in columns",
            "category": "gdpr",
            "type": "pattern_match",
            "severity": "Critical",
            "validation_code": "df[column_name].str.match(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')",
            "message": "Column may contain email addresses (PII data)",
            "active": true
        }
    ],
    "validation_rules": [
        {
            "id": "val_001",
            "name": "Email Domain Check",
            "description": "Validates that email domains are from allowed list",
            "type": "Security",
            "severity": "High",
            "validation_code": "~df['email'].str.extract('@(.+)$')[0].isin(allowed_domains)",
            "message": "Unauthorized email domain detected",
            "active": true
        },
        {
            "id": "val_002",
            "name": "Country Code Check",
            "description": "Validates that country codes are valid ISO codes",
            "type": "Reference",
            "severity": "High",
            "validation_code": "~df['country'].isin(iso_country_codes)",
            "message": "Invalid country code detected",
            "active": true
        },
        {
            "id": "val_003",
            "name": "JSON Format Check",
            "description": "Validates that string values are valid JSON",
            "type": "format_check",
            "severity": "Medium",
            "validation_code": "df[column_name].apply(lambda x: bool(json.loads(x)) if isinstance(x, str) else False)",
            "message": "Values should be valid JSON strings",
            "active": true
        }
    ]
} 