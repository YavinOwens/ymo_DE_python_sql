{
    "gdpr_rules": [
        {
            "id": "gdpr_email_format",
            "name": "Email Format Check",
            "description": "Validates email format for employee data",
            "category": "GDPR",
            "severity": "High",
            "active": true,
            "validation_code": "df['email'].str.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$').fillna(False)",
            "message": "Invalid email format detected"
        }
    ],
    "data_quality_rules": [
        {
            "id": "dq_not_null",
            "name": "Not Null Check",
            "description": "Ensures required fields are not null",
            "category": "Data Quality",
            "severity": "High",
            "active": true,
            "validation_code": "df[column_name].isnull()",
            "message": "Null values found in required field"
        },
        {
            "id": "dq_salary_range",
            "name": "Salary Range Check",
            "description": "Validates salary is within acceptable range",
            "category": "Data Quality",
            "severity": "Medium",
            "active": true,
            "validation_code": "(df['salary'] < 0) | (df['salary'] > 1000000)",
            "message": "Salary values outside acceptable range"
        },
        {
            "id": "dq_hire_date",
            "name": "Hire Date Format",
            "description": "Validates hire date format",
            "category": "Data Quality",
            "severity": "Medium",
            "active": true,
            "validation_code": "pd.to_datetime(df['hire_date'], errors='coerce').isnull()",
            "message": "Invalid hire date format"
        }
    ],
    "validation_rules": [
        {
            "id": "val_department_id",
            "name": "Department ID Check",
            "description": "Validates department IDs exist in departments table",
            "category": "Validation",
            "severity": "High",
            "active": true,
            "validation_code": "~df['department_id'].isin(pd.read_sql('SELECT department_id FROM departments', con).department_id)",
            "message": "Invalid department IDs found"
        },
        {
            "id": "val_job_id",
            "name": "Job ID Check",
            "description": "Validates job IDs exist in jobs table",
            "category": "Validation",
            "severity": "High",
            "active": true,
            "validation_code": "~df['job_id'].isin(pd.read_sql('SELECT job_id FROM jobs', con).job_id)",
            "message": "Invalid job IDs found"
        }
    ],
    "business_rules": [
        {
            "id": "bus_manager_check",
            "name": "Manager ID Check",
            "description": "Validates manager IDs exist in employees table",
            "category": "Business",
            "severity": "Medium",
            "active": true,
            "validation_code": "df['manager_id'].notna() & ~df['manager_id'].isin(df['employee_id'])",
            "message": "Invalid manager IDs found"
        },
        {
            "id": "bus_commission",
            "name": "Commission Check",
            "description": "Validates commission percentage is between 0 and 1",
            "category": "Business",
            "severity": "Low",
            "active": true,
            "validation_code": "(df['commission_pct'] < 0) | (df['commission_pct'] > 1)",
            "message": "Commission percentage outside valid range"
        }
    ],
    "table_level_rules": [
        {
            "id": "tbl_duplicate_check",
            "name": "Duplicate Records Check",
            "description": "Checks for duplicate records based on primary key",
            "category": "Table Level",
            "severity": "Critical",
            "active": true,
            "validation_code": "df.duplicated(subset=['employee_id'], keep=False)",
            "message": "Duplicate records found"
        },
        {
            "id": "tbl_salary_budget",
            "name": "Department Salary Budget Check",
            "description": "Validates department salary totals against budget",
            "category": "Table Level",
            "severity": "High",
            "active": true,
            "validation_code": "df.groupby('department_id')['salary'].sum() > pd.read_sql('SELECT budget FROM departments', con)['budget']",
            "message": "Department salary total exceeds budget"
        }
    ]
}